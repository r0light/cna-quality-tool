tosca_definitions_version: tosca_2_0

metadata:
  template_name: node_types.yaml
  template_author: Distributed Systems Group
  template_version: 0.2

description: >-
  This TOSCA definitions document contains the CNA Modeling node types.

node_types:

  cna-modeling.entities.Component:
    derived_from: SoftwareComponent
    description: Node Type to model Component entities
    properties:
      managed:
        type: boolean
        description: A component is managed if it is exclusively operated by someone else, e.g. a cloud provider and the source code of the component instance is inaccessible. If the source code of a component can be changed by yourself, the component is not managed.
        required: true
      software_type:
        type: string
        description: The type of the software in the sense of who developed it. If it is a self-written component use "custom", if it is an existing open-source solution which is not customized (apart from configuration) use "open-source". If it is licensed proprietary software, use "proprietary".
        default: custom
        required: true
      stateless:
        type: boolean
        description: True if this component is stateless, that means it requires no disk storage space where data is persisted between executions. That means it can store data to disk, but should not rely on this data to be available for following executions. Instead it should be able to restore required data after a restart in a different environment. 
        default: true
        required: true
      artifact:
        type: string
        description: The kind of artifact which is produced for deploying this component. This can for example be a container image, a native executable, a jar file, or some custom packaging format for specific cloud services.
        required: true
      load_shedding:
        type: boolean
        description: Whether or not this component applies load shedding. That means whether the component rejects incoming load based on certain thresholds (resource usage, concurrent requests).
        required: true
        default: false
      assigned_networks:
        type: list
        description: A list of networks to which this component is assigned to.
        entry_schema:
          description: Either a network id or subnet mask
          type: string
    requirements:
      - host:
          capability: Compute
          node: cna-modeling.entities.Infrastructure
          relationship: cna-modeling.entities.HostedOn.DeploymentMapping
      # Allow the definition of endpoints provided by this Component
      - provides_endpoint:
          capability: Endpoint
          relationship: cna-modeling.relationships.Provides.Endpoint
          count_range: [0, UNBOUNDED]
      # Allow the definition of endpoints provided by this Component
      - provides_external_endpoint:
          capability: Endpoint.Public
          relationship: cna-modeling.relationships.Provides.Endpoint
          count_range: [0, UNBOUNDED]
      # Allow the definition of Links between Components
      - endpoint_link:
          capability: Endpoint
          node: cna-modeling.entities.Endpoint
          relationship: cna-modeling.relationships.ConnectsTo.Link
          count_range: [0, UNBOUNDED]
      # Allow the definition of Data Aggregate usage
      - uses_data:
          capability: Attachment
          node: cna-modeling.entities.DataAggregate
          relationship: cna-modeling.relationships.AttachesTo.DataAggregate
          count_range: [0, UNBOUNDED]
      # Allow the definition of Backing Data usage
      - uses_backing_data:
          capability: Attachment
          node: cna-modeling.entities.BackingData
          relationship: cna-modeling.relationships.AttachesTo.BackingData
          count_range: [0, UNBOUNDED]
      - proxied_by:
          capability: cna-modeling.capabilities.Proxy
          node: cna-modeling.entities.BackingService
          relationship: cna-modeling.relationships.ProxiedBy.BackingService
          count_range: [0,1]

  cna-modeling.entities.Service:
    derived_from: cna-modeling.entities.Component
    description: Node Type to model Service entities

  cna-modeling.entities.BackingService:
    derived_from: cna-modeling.entities.Component
    description: Node Type to model Backing Service entities
    properties:
      providedFunctionality:
        type: string
        description: "A short description of the provided functionality."
        required: false
    capabilities:
      proxy:
        type: cna-modeling.capabilities.Proxy
        valid_source_node_types:
          - cna-modeling.entities.Component
          - cna-modeling.entities.Service
          - cna-modeling.entities.BackingService
          - cna-modeling.entities.StorageBackingService
        #count_range: [0, UNBOUNDED]

  cna-modeling.entities.StorageBackingService:
    derived_from: cna-modeling.entities.Component
    description: Node Type to model Storage Backing Service entities
    properties:
      name:
        type: string
        description: >-
          the logical name of the database
        required: true
      stateless:
        type: boolean
        description: Storage Backing Service are per default stateful (not stateless)
        default: false
        required: true
      shards:
        type: integer
        description: The number of shards this storage service is configured with, the default of 1 means no sharding is used.
        required: true
        default: 1

  cna-modeling.entities.Infrastructure:
    derived_from: Abstract.Compute
    description: Node Type to model Infrastructure entities
    properties:
      kind:
        type: string
        description: The kind of infrastructure. Possible kinds are "physical hardware", "virtual hardware", "software platform", or "cloud service".
        required: true
        default: virtual hardware
      environment_access:
        type: string
        description: Describes the extend of available access to the environment in which the infrastructure is operated. With full access, one can control all aspects of the infrastructure. Limited access means that infrastructure is under control of a provider and only certain things are allowed, such as configuration. With no access infrastructure is completely managed by a cloud provider.
        default: full
      maintenance:
        type: string
        description: How infrastructure is maintained, that means for example how updates are installed or how certificates are regenerated.
        default: manual
      provisioning:
        type: string
        description: How infrastructure is initially provisioned. This can be done manually (for example through the web interface of a cloud provider), automatically coded (for example through an IaC tool), automatically inferred, if it is inferred based on deployed components, or transparent, if it is not explicitly provisioned by a consumer, but done on-demand by a provider.
        default: manual
      supported_artifacts:
        type: list
        description: Which kind of artifacts can be deployed on this infrastructure, e.g. VM images, container images, jar archives, native executables, ... 
        entry_schema:
          description: An artifact type that this infrastructure supports.
          type: string
      availability_zone:
        type: string
        required: true
        description: The name of the availability zone in which this infrastructure is provided. If it is running in multiple availability zones, provide their names as a comma-separated list.
        default: default-zone
      region:
        type: string
        required: true
        description: The name of the region in which this infrastructure is provided.
        default: default-region
      supported_update_strategies:
        type: list
        description: Which update strategies are supported for entities deployed on this infrastructure
        entry_schema:
          description: An update strategy supported by this infrastructure
          type: string
      deployed_entities_scaling:
        type: string
        required: true
        description: Whether and how entities deployed on this infrastructure can be scaled horizontally
        default: none
      self_scaling:
        type: string
        required: true
        description: Whether and how this entity scales itself, either horizontally or vertically.
        default: none  
      enforced_resource_bounds:
        type: boolean
        required: true
        description: Set to true if the infrastructure enforces resource bounds on deployed components, for example regarding cpu shares or memory size. Deployed entities can then only use resources up to a certain bound. Otherwise entities can use resources as available.
        default: false
      assigned_networks:
        type: list
        description: A list of networks to which this infrastructure is assigned to.
        entry_schema:
          description: Either a network id or subnet mask
          type: string
    requirements:
      # Allow the deployment on another Infrastructure entity
      - host:
          capability: Compute
          node: cna-modeling.entities.Infrastructure
          relationship: cna-modeling.entities.HostedOn.DeploymentMapping
          count_range: [0, UNBOUNDED]
      # Allow the definition of Backing Data usage
      - uses_backing_data:
          capability: Attachment
          node: cna-modeling.entities.BackingData
          relationship: cna-modeling.relationships.AttachesTo.BackingData
          count_range: [0, UNBOUNDED]

  cna-modeling.entities.Endpoint:
    derived_from: Root
    description: Endpoint type to explicitly model endpoints as entities
    properties:
      rate_limiting:
        type: string
        required: true
        description: If for this endpoint rate limiting is enforced, the limit can be stated here, otherwise it is "none".
        default: none
      idempotent:
        type: boolean
        required: true
        description: Flag to specify whether this endpoint is idempotent, meaning that the effect of a successful invocation is independent of the number of times it is invoked.
        default: false
      readiness_check:
        type: boolean
        required: true
        description: Flag to specify whether this endpoint is used as a readiness check
        default: false
      health_check:
        type: boolean
        required: true
        description: Flag to specify whether this endpoint is used as a health check
        default: false
    capabilities:
      # Allow assigning exactly one Endpoint Capability
      endpoint:
        type: Endpoint
        #count_range: [1, 1]
    requirements:
      # Allow the definition of Data Aggregate usage
      - uses_data:
          capability: Attachment
          node: cna-modeling.entities.DataAggregate
          relationship: cna-modeling.relationships.AttachesTo.DataAggregate
          count_range: [0, UNBOUNDED]

  cna-modeling.entities.Endpoint.External:
    derived_from: Root
    description: Endpoint type to explicitly model external endpoints as entities
    capabilities:
      # Allow assigning exactly one External Endpoint Capability
      external_endpoint:
        type: Endpoint.Public
        #count_range: [1, 1]
    requirements:
      # Allow the definition of Data Aggregate usage
      - uses_data:
          capability: Attachment
          node: cna-modeling.entities.DataAggregate
          relationship: cna-modeling.relationships.AttachesTo.DataAggregate
          count_range: [0, UNBOUNDED]

  cna-modeling.entities.BackingData:
    derived_from: Root
    description: Node Type to model Backing Data entities
    properties:
      included_data:
        type: map
        required: true
        key_schema:
          type: string
          description: The name specifying the individual Backing Data element
        entry_schema:
          type: string
          description: The value of the individual Backing Data element
    capabilities:
      provides_data:
        type: Attachment
        valid_source_node_types:
          - cna-modeling.entities.Component
          - cna-modeling.entities.Service
          - cna-modeling.entities.BackingService
          - cna-modeling.entities.StorageBackingService
          - cna-modeling.entities.Infrastructure
        #count_range: [1, UNBOUNDED]

  cna-modeling.entities.DataAggregate:
    derived_from: Root
    description: Node Type to model Data Aggregate entities
    capabilities:
      # Allows Data Aggregate to be used by other entities
      provides_data:
        type: Attachment
        valid_source_node_types:
          - cna-modeling.entities.Component
          - cna-modeling.entities.Service
          - cna-modeling.entities.BackingService
          - cna-modeling.entities.StorageBackingService
        #count_range: [1, UNBOUNDED]

  cna-modeling.entities.RequestTrace:
    derived_from: Root
    description: Node Type to model Request Trace entities
    properties:
      referred_endpoint:
        type: string
        required: true
      nodes:
        type: list
        required: false
        entry_schema:
          description: An existing Component, Service, Backing Service or Storage Backing Service entity which is part of this Request Trace entity
          type: string
      involved_links:
        type: list
        required: true
        entry_schema:
          description: An existing Link entity which is part of this Request Trace entity
          type: string
    requirements:
      # Reference to External Endpoint for which the Request Trace is defined
      - external_endpoint:
          capability: Endpoint.Public
          relationship: ConnectsTo
          count_range: [1, 1]
