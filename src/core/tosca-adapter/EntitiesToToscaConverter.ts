import * as Entities from '../entities'
import { TwoWayKeyIdMap } from "./TwoWayKeyIdMap";
import { UniqueKeyManager } from "./UniqueKeyManager";
import { flatMetaData } from '../common/entityDataTypes';
import { ENDPOINT_TOSCA_EQUIVALENT, ENDPOINT_TOSCA_KEY } from '../entities/endpoint';
import { REQUEST_TRACE_TOSCA_KEY } from '../entities/requestTrace';
import { DEPLOYMENT_MAPPING_TOSCA_KEY } from '../entities/deploymentMapping';
import { LINK_TOSCA_KEY } from '../entities/link';
import { EntityProperty, parseCapabilitiesProperties, parseProperties } from '../common/entityProperty';
import { DATA_AGGREGATE_TOSCA_KEY } from '../entities/dataAggregate';
import { BACKING_DATA_TOSCA_KEY } from '../entities/backingData';
import { INFRASTRUCTURE_TOSCA_EQUIVALENT, INFRASTRUCTURE_TOSCA_KEY } from '../entities/infrastructure';
import { SERVICE_TOSCA_EQUIVALENT, SERVICE_TOSCA_KEY } from '../entities/service';
import { BACKING_SERVICE_TOSCA_EQUIVALENT, BACKING_SERVICE_TOSCA_KEY } from '../entities/backingService';
import { STORAGE_BACKING_SERVICE_TOSCA_EQUIVALENT, STORAGE_BACKING_SERVICE_TOSCA_KEY } from '../entities/storageBackingService';
import { COMPONENT_TOSCA_EQUIVALENT, COMPONENT_TOSCA_KEY } from '../entities/component';
import { EXTERNAL_ENDPOINT_TOSCA_EQUIVALENT, EXTERNAL_ENDPOINT_TOSCA_KEY } from '../entities/externalEndpoint';
import { TOSCA_File } from '@/totypa/tosca-types/v2dot0-types/definition-types';
import { TOSCA_Node_Template, TOSCA_Relationship_Template, TOSCA_Requirement_Assignment, TOSCA_Service_Template } from '@/totypa/tosca-types/v2dot0-types/template-types';
import { TOSCA_Property_Assignment } from '@/totypa/tosca-types/v2dot0-types/alias-types';
import { PROXY_BACKING_SERVICE_TOSCA_EQUIVALENT, PROXY_BACKING_SERVICE_TOSCA_KEY } from '../entities/proxyBackingService';
import { BROKER_BACKING_SERVICE_TOSCA_EQUIVALENT, BROKER_BACKING_SERVICE_TOSCA_KEY } from '../entities/brokerBackingService';
import { NETWORK_TOSCA_KEY } from '../entities/network';

const TOSCA_DEFINITIONS_VERSION = "tosca_2_0"
const MATCH_WHITESPACES = new RegExp(/\s/g);
const MATCH_UNWANTED_CHARACTERS = new RegExp(/[#>\-\.]/g);
const MATCH_MULTIPLE_UNDERSCORES = new RegExp(/_+/g);

class EntitiesToToscaConverter {

    #uniqueKeyManager = new UniqueKeyManager();

    #keyIdMap = new TwoWayKeyIdMap();

    #systemEntity: Entities.System;

    #toscaFile: TOSCA_File;

    constructor(systemEntity: Entities.System, version: string) {
        this.#systemEntity = systemEntity;
        this.#toscaFile = {
            tosca_definitions_version: TOSCA_DEFINITIONS_VERSION,
            metadata: {
                template_author: "CNA modeling tool",
                template_name: systemEntity.getSystemName,
                template_version: "0.2" // TODO customize
            },
            description: "Service template generated by the CNA modeling tool"
        }
    }

    convert(): TOSCA_File {

        let serviceTemplate: TOSCA_Service_Template = {
            description: "Topology template generated by the CNA modeling tool",
            node_templates: {},
            relationship_templates: {}
        };

        for (const [id, dataAggregate] of this.#systemEntity.getDataAggregateEntities.entries()) {
            const nodeKey: string = this.#uniqueKeyManager.ensureUniqueness(this.#transformToYamlKey(dataAggregate.getName));
            let node = this.#createDataAggregateTemplate(dataAggregate);
            this.#keyIdMap.add(nodeKey, id);
            serviceTemplate.node_templates[nodeKey] = node;
        }

        for (const [id, backingData] of this.#systemEntity.getBackingDataEntities.entries()) {
            const nodeKey: string = this.#uniqueKeyManager.ensureUniqueness(this.#transformToYamlKey(backingData.getName));
            let node = this.#createBackingDataTemplate(backingData);
            this.#keyIdMap.add(nodeKey, id);
            serviceTemplate.node_templates[nodeKey] = node;
        }

        for (const [id, network] of this.#systemEntity.getNetworkEntities.entries()) {
            const nodeKey: string = this.#uniqueKeyManager.ensureUniqueness(this.#transformToYamlKey(network.getName));
            let node = this.#createNetworkTemplate(network);
            this.#keyIdMap.add(nodeKey, id);
            serviceTemplate.node_templates[nodeKey] = node;
        }

        for (const [id, infrastructure] of this.#systemEntity.getInfrastructureEntities.entries()) {
            const nodeKey: string = this.#uniqueKeyManager.ensureUniqueness(this.#transformToYamlKey(infrastructure.getName));
            let node = this.#createInfrastructureTemplate(infrastructure);
            if (infrastructure.getBackingDataEntities.length > 0) {
                if (!node.requirements) {
                    node.requirements = [];
                }
                for (const usedBackingData of infrastructure.getBackingDataEntities) {
                    const usageRelationshipKey = this.#uniqueKeyManager.ensureUniqueness(`${nodeKey}_uses_${this.#keyIdMap.getKey(usedBackingData.backingData.getId)}`);
                    let backingDataRelationship: TOSCA_Relationship_Template = {
                        type: "cna-modeling.relationships.AttachesTo.Data",
                        metadata: flatMetaData(usedBackingData.relation.getMetaData),
                    };

                    if (usedBackingData.relation.getProperties().length > 0) {
                        backingDataRelationship.properties = this.#parsePropertiesForYaml(usedBackingData.relation.getProperties());
                    }

                    serviceTemplate.relationship_templates[usageRelationshipKey] = backingDataRelationship;

                    node.requirements.push({
                        "uses_backing_data": {
                            node: this.#keyIdMap.getKey(usedBackingData.backingData.getId),
                            relationship: usageRelationshipKey
                        }
                    });
                }
            }


            if (infrastructure.getNetworks.size > 0) {
                if (!node.requirements) {
                    node.requirements = [];
                }

                for (const [networkId, network] of infrastructure.getNetworks) {
                    node.requirements.push({
                        "assigned_to_network": {
                            node: this.#keyIdMap.getKey(networkId),
                            relationship: "cna-modeling.relationships.LinksTo"
                        }
                    });
                }
            }

            this.#keyIdMap.add(nodeKey, id);
            serviceTemplate.node_templates[nodeKey] = node;
        }

        // first pass for components: only add basic component templates
        for (const [id, component] of this.#systemEntity.getComponentEntities.entries()) {
            const nodeKey: string = this.#uniqueKeyManager.ensureUniqueness(this.#transformToYamlKey(component.getName));
            let node = this.#createComponentTemplate(component);
            this.#keyIdMap.add(nodeKey, id);
            serviceTemplate.node_templates[nodeKey] = node;
        }

        // second pass for components: add embedded entites and requirements
        for (const [id, component] of this.#systemEntity.getComponentEntities.entries()) {

            const nodeKey = this.#keyIdMap.getKey(id);
            const node = serviceTemplate.node_templates[nodeKey];

            if (component.getEndpointEntities.length > 0) {
                node.requirements = [];
                for (const endpoint of component.getEndpointEntities) {
                    const endpointNodeKey = this.#uniqueKeyManager.ensureUniqueness(this.#transformToYamlKey(endpoint.getName))
                    let endpointNode = this.#createEndpointTemplate(endpoint);

                    for (const usedDataAggregate of endpoint.getDataAggregateEntities) {

                        let dataAggregateKey = this.#keyIdMap.getKey(usedDataAggregate.data.getId);

                        if (!endpointNode["requirements"]) {
                            endpointNode["requirements"] = [];
                        }

                        endpointNode.requirements.push({
                            "uses_data": dataAggregateKey
                        });
                    }

                    this.#keyIdMap.add(endpointNodeKey, endpoint.getId);
                    serviceTemplate.node_templates[endpointNodeKey] = endpointNode;
                    node.requirements.push({
                        "provides_endpoint": {
                            capability: "cna-modeling.capabilities.Endpoint",
                            node: endpointNodeKey,
                            relationship: "cna-modeling.relationships.Provides.Endpoint",
                        }
                    });
                }
            }

            if (component.getExternalEndpointEntities.length > 0) {
                if (!node.requirements) {
                    node.requirements = [];
                }
                for (const externalEndpoint of component.getExternalEndpointEntities) {
                    const endpointNodeKey = this.#uniqueKeyManager.ensureUniqueness(this.#transformToYamlKey(externalEndpoint.getName))
                    let endpointNode = this.#createExternalEndpointTemplate(externalEndpoint);

                    for (const usedDataAggregate of externalEndpoint.getDataAggregateEntities) {

                        let dataAggregateKey = this.#keyIdMap.getKey(usedDataAggregate.data.getId);

                        if (!endpointNode["requirements"]) {
                            endpointNode["requirements"] = [];
                        }

                        endpointNode.requirements.push({
                            "uses_data": dataAggregateKey
                        });
                    }

                    this.#keyIdMap.add(endpointNodeKey, externalEndpoint.getId);
                    serviceTemplate.node_templates[endpointNodeKey] = endpointNode;
                    node.requirements.push({
                        "provides_external_endpoint": {
                            capability: "cna-modeling.capabilities.Endpoint",
                            node: endpointNodeKey,
                            relationship: "cna-modeling.relationships.Provides.Endpoint"
                        }
                    });
                }
            }

            if (component.getDataAggregateEntities.length > 0) {
                if (!node.requirements) {
                    node.requirements = [];
                }
                for (const usedDataAggregate of component.getDataAggregateEntities) {

                    const usageRelationshipKey = this.#uniqueKeyManager.ensureUniqueness(`${nodeKey}_uses_${this.#keyIdMap.getKey(usedDataAggregate.data.getId)}`);
                    let dataAggregateRelationship: TOSCA_Relationship_Template = {
                        type: "cna-modeling.relationships.AttachesTo.DataAggregate",
                        metadata: flatMetaData(usedDataAggregate.relation.getMetaData),
                    };

                    if (usedDataAggregate.relation.getProperties().length > 0) {
                        dataAggregateRelationship.properties = this.#parsePropertiesForYaml(usedDataAggregate.relation.getProperties());
                    }

                    serviceTemplate.relationship_templates[usageRelationshipKey] = dataAggregateRelationship;

                    node.requirements.push({
                        "uses_data": {
                            node: this.#keyIdMap.getKey(usedDataAggregate.data.getId),
                            relationship: usageRelationshipKey
                        }
                    });
                }
            }

            if (component.getBackingDataEntities.length > 0) {
                if (!node.requirements) {
                    node.requirements = [];
                }
                for (const usedBackingData of component.getBackingDataEntities) {

                    const usageRelationshipKey = this.#uniqueKeyManager.ensureUniqueness(`${nodeKey}_uses_${this.#keyIdMap.getKey(usedBackingData.backingData.getId)}`);
                    let backingDataRelationship: TOSCA_Relationship_Template = {
                        type: "cna-modeling.relationships.AttachesTo.BackingData",
                        metadata: flatMetaData(usedBackingData.relation.getMetaData),
                    };

                    if (usedBackingData.relation.getProperties().length > 0) {
                        backingDataRelationship.properties = this.#parsePropertiesForYaml(usedBackingData.relation.getProperties());
                    }

                    serviceTemplate.relationship_templates[usageRelationshipKey] = backingDataRelationship;

                    node.requirements.push({
                        "uses_backing_data": {
                            node: this.#keyIdMap.getKey(usedBackingData.backingData.getId),
                            relationship: usageRelationshipKey
                        }
                    });
                }
            }


            if (component.getExternalIngressProxiedBy) {
                if (!node.requirements) {
                    node.requirements = [];
                }

                node.requirements.push({
                    "external_ingress_proxied_by": {
                        node: this.#keyIdMap.getKey(component.getExternalIngressProxiedBy.getId),
                        relationship: "cna-modeling.relationships.ProxiedBy.BackingService"
                    }
                });
            }

            if (component.getIngressProxiedBy) {
                if (!node.requirements) {
                    node.requirements = [];
                }

                node.requirements.push({
                    "ingress_proxied_by": {
                        node: this.#keyIdMap.getKey(component.getIngressProxiedBy.getId),
                        relationship: "cna-modeling.relationships.ProxiedBy.BackingService"
                    }
                });
            }


            if (component.getEgressProxiedBy) {
                if (!node.requirements) {
                    node.requirements = [];
                }

                node.requirements.push({
                    "egress_proxied_by": {
                        node: this.#keyIdMap.getKey(component.getEgressProxiedBy.getId),
                        relationship: "cna-modeling.relationships.ProxiedBy.BackingService"
                    }
                });
            }


            if (component.getAddressResolutionBy) {

                if (!node.requirements) {
                    node.requirements = [];
                }

                node.requirements.push({
                    "address_resolution_by": {
                        node: this.#keyIdMap.getKey(component.getAddressResolutionBy.getId),
                        relationship: "cna-modeling.relationships.UseAddressResolution"
                    }
                });
            }

            if (component.getAuthenticationBy) {
                
                if (!node.requirements) {
                    node.requirements = [];
                }

                node.requirements.push({
                    "authentication_by": {
                        node: this.#keyIdMap.getKey(component.getAuthenticationBy.getId),
                        relationship: "cna-modeling.relationships.DelegateAuthentication"
                    }
                });
            }

            if (component.getNetworks.size > 0) {
                if (!node.requirements) {
                    node.requirements = [];
                }

                for (const [networkId, network] of component.getNetworks) {
                    node.requirements.push({
                        "assigned_to_network": {
                            node: this.#keyIdMap.getKey(networkId),
                            relationship: "cna-modeling.relationships.LinksTo"
                        }
                    });
                }
            }
        }

        for (const [id, deploymentMapping] of this.#systemEntity.getDeploymentMappingEntities.entries()) {
            const hostNodeKey = this.#keyIdMap.getKey(deploymentMapping.getUnderlyingInfrastructure.getId);
            const hostedNodeKey = this.#keyIdMap.getKey(deploymentMapping.getDeployedEntity.getId);
            const deploymentRelationshipKey = this.#uniqueKeyManager.ensureUniqueness(`${hostNodeKey}_hosts_${hostedNodeKey}`);

            let relationship: TOSCA_Relationship_Template = {
                type: DEPLOYMENT_MAPPING_TOSCA_KEY
            }

            let properties = this.#parsePropertiesForYaml(deploymentMapping.getProperties());
            if (this.#isNonEmpty(properties)) {
                relationship.properties = properties;
            }

            this.#keyIdMap.add(deploymentRelationshipKey, id);
            serviceTemplate.relationship_templates[deploymentRelationshipKey] = relationship;

            let hostedNodeTemplate = serviceTemplate.node_templates[hostedNodeKey];

            if (!hostedNodeTemplate.requirements) {
                hostedNodeTemplate.requirements = [];
            }

            hostedNodeTemplate.requirements.push({
                "host": {
                    node: hostNodeKey,
                    relationship: deploymentRelationshipKey
                }
            })


        }

        for (const [id, link] of this.#systemEntity.getLinkEntities.entries()) {
            const targetNodeKey = this.#keyIdMap.getKey(link.getTargetEndpoint.getId);
            const sourceNodeKey = this.#keyIdMap.getKey(link.getSourceEntity.getId);
            const linkRelationshipKey = this.#uniqueKeyManager.ensureUniqueness(`${sourceNodeKey}_linksTo_${targetNodeKey}`);

            let relationship: TOSCA_Relationship_Template = {
                type: LINK_TOSCA_KEY
            }

            let properties = this.#parsePropertiesForYaml(link.getProperties());
            if (this.#isNonEmpty(properties)) {
                relationship.properties = properties;
            }

            this.#keyIdMap.add(linkRelationshipKey, id);
            serviceTemplate.relationship_templates[linkRelationshipKey] = relationship;

            let sourceNodeTemplate = serviceTemplate.node_templates[sourceNodeKey];

            if (!sourceNodeTemplate.requirements) {
                sourceNodeTemplate.requirements = [];
            }

            sourceNodeTemplate.requirements.push({
                "endpoint_link": {
                    node: targetNodeKey,
                    relationship: linkRelationshipKey
                }
            })
        }

        for (const [id, requestTrace] of this.#systemEntity.getRequestTraceEntities.entries()) {
            const nodeKey = this.#uniqueKeyManager.ensureUniqueness(this.#transformToYamlKey(requestTrace.getName));
            let node = this.#createRequestTraceTemplate(requestTrace, this.#systemEntity, this.#keyIdMap);

            serviceTemplate.node_templates[nodeKey] = node;
        }

        this.#toscaFile.service_template = serviceTemplate;
        return this.#toscaFile;

    }

    #transformToYamlKey(name: string) {

        // 1. no leading or trailing whitespaces 
        // 2. replace whitespaces with underscore
        // 3. replace # > - . with underscore
        // 4. ensure no subsequent underscores

        return name.trim()
            .replace(MATCH_WHITESPACES, "_")
            .replace(MATCH_UNWANTED_CHARACTERS, "_")
            .replace(MATCH_MULTIPLE_UNDERSCORES, "_")
            .toLocaleLowerCase();
    }

    #parsePropertiesForYaml(properties: EntityProperty[]): { [propertyKey: string]: TOSCA_Property_Assignment | string } {
        let yamlProperties: { [propertyKey: string]: TOSCA_Property_Assignment | string } = {};
        for (const property of properties) {
            yamlProperties[property.getKey] = property.value
        }
        return yamlProperties;
    }


    #createDataAggregateTemplate(dataAggregate: Entities.DataAggregate): TOSCA_Node_Template {
        return {
            type: DATA_AGGREGATE_TOSCA_KEY,
            metadata: flatMetaData(dataAggregate.getMetaData),
            capabilities: {
                "provides_data": {}
            }
        }
    }


    #createBackingDataTemplate(backingData: Entities.BackingData): TOSCA_Node_Template {

        let template: TOSCA_Node_Template = {
            type: BACKING_DATA_TOSCA_KEY,
            metadata: flatMetaData(backingData.getMetaData),
            capabilities: {
                "provides_data": {}
            }
        }

        if (backingData.getProperties().length > 0) {
            template.properties = this.#parsePropertiesForYaml(backingData.getProperties());
        }

        return template;
    }

    #createNetworkTemplate(network: Entities.Network): TOSCA_Node_Template {

        let template: TOSCA_Node_Template = {
            type: NETWORK_TOSCA_KEY,
            metadata: flatMetaData(network.getMetaData),
        }

        if (network.getProperties().length > 0) {
            template.properties = this.#parsePropertiesForYaml(network.getProperties());
        }

        return template;
    }

    #createInfrastructureTemplate(infrastructure: Entities.Infrastructure): TOSCA_Node_Template {

        let template: TOSCA_Node_Template = {
            type: INFRASTRUCTURE_TOSCA_KEY,
            metadata: flatMetaData(infrastructure.getMetaData),
        }

        if (infrastructure.getProperties().length > 0) {
            template.properties = this.#parsePropertiesForYaml(infrastructure.getProperties());
        }

        let infrastructureNodePropertyKeys = parseProperties(INFRASTRUCTURE_TOSCA_EQUIVALENT.properties).map(property => property.getKey);
        let nodeProperties = this.#parsePropertiesForYaml(infrastructure.getProperties().filter(property => infrastructureNodePropertyKeys.includes(property.getKey)));
        if (this.#isNonEmpty(nodeProperties)) {
            template.properties = nodeProperties;
        }

        [...parseCapabilitiesProperties(INFRASTRUCTURE_TOSCA_EQUIVALENT.capabilities).entries()].forEach(([capabilityKey, capabilityProperties]) => {
            switch (capabilityKey) {
                case "address_resolution":
                    if (infrastructure.getProperty("address_resolution_kind").value === "none") {
                        return;
                    }
                default:
                    let propertyKeys = Object.keys(capabilityProperties);
                    if (propertyKeys.length > 0) {
                        if (!template.capabilities) {
                            template.capabilities = {};
                        }
                        template.capabilities[capabilityKey] = {
                            properties: this.#parsePropertiesForYaml(infrastructure.getProperties().filter(property => propertyKeys.includes(property.getKey)))
                        }
                    }
                    break;
            }
        })

        if (infrastructure.getArtifacts.size > 0) {
            template.artifacts = {};
            for (const [key, artifact] of infrastructure.getArtifacts.entries()) {
                //TODO include only keys with a value
                template.artifacts[key] = artifact.getAsSimpleObject("");
            }
        }

        return template;
    }

    #createComponentTemplate(component: Entities.Component): TOSCA_Node_Template {

        let typeKey = (() => {
            switch (component.constructor) {
                case Entities.Service:
                    return SERVICE_TOSCA_KEY;
                case Entities.BackingService:
                    return BACKING_SERVICE_TOSCA_KEY;
                case Entities.StorageBackingService:
                    return STORAGE_BACKING_SERVICE_TOSCA_KEY;
                case Entities.ProxyBackingService:
                    return PROXY_BACKING_SERVICE_TOSCA_KEY;
                case Entities.BrokerBackingService:
                    return BROKER_BACKING_SERVICE_TOSCA_KEY;
                case Entities.Component:
                default:
                    return COMPONENT_TOSCA_KEY;
            }
        })();

        let template: TOSCA_Node_Template = {
            type: typeKey,
            metadata: flatMetaData(component.getMetaData),
        }

        let toscaEquivalent = (() => {
            switch (component.constructor) {
                case Entities.Service:
                    return SERVICE_TOSCA_EQUIVALENT;
                case Entities.BackingService:
                    return BACKING_SERVICE_TOSCA_EQUIVALENT;
                case Entities.StorageBackingService:
                    return STORAGE_BACKING_SERVICE_TOSCA_EQUIVALENT;
                case Entities.ProxyBackingService:
                    return PROXY_BACKING_SERVICE_TOSCA_EQUIVALENT;
                case Entities.BrokerBackingService:
                    return BROKER_BACKING_SERVICE_TOSCA_EQUIVALENT;
                case Entities.Component:
                default:
                    return COMPONENT_TOSCA_EQUIVALENT;
            }
        })();

        let componentNodePropertyKeys = parseProperties(toscaEquivalent.properties).map(property => property.getKey);
        let nodeProperties = this.#parsePropertiesForYaml(component.getProperties().filter(property => componentNodePropertyKeys.includes(property.getKey)));
        if (this.#isNonEmpty(nodeProperties)) {
            template.properties = nodeProperties;
        }

        if (toscaEquivalent.capabilities) {

            [...parseCapabilitiesProperties(toscaEquivalent.capabilities).entries()].forEach(([capabilityKey, capabilityProperties]) => {
                switch (capabilityKey) {
                    case "address_resolution":
                        if (component.getProperty("address_resolution_kind").value === "none") {
                            return;
                        }
                    default:
                        let propertyKeys = Object.keys(capabilityProperties);
                        if (propertyKeys.length > 0) {
                            if (!template.capabilities) {
                                template.capabilities = {};
                            }
                            template.capabilities[capabilityKey] = {
                                properties: this.#parsePropertiesForYaml(component.getProperties().filter(property => propertyKeys.includes(property.getKey)))
                            }
                        }
                        break;
                }
            })
        }

        if (component.getArtifacts.size > 0) {
            template.artifacts = {};
            for (const [key, artifact] of component.getArtifacts.entries()) {
                //TODO include only keys with a value
                console.log(artifact);
                template.artifacts[key] = artifact.getAsSimpleObject("");
                console.log(template.artifacts[key]);
            }
        }

        return template;
    }


    #createEndpointTemplate(endpoint: Entities.Endpoint): TOSCA_Node_Template {
        let endpointNodePropertyKeys = parseProperties(ENDPOINT_TOSCA_EQUIVALENT.properties).map(property => property.getKey);
        let template: TOSCA_Node_Template = {
            type: ENDPOINT_TOSCA_KEY,
            metadata: flatMetaData(endpoint.getMetaData),
            properties: this.#parsePropertiesForYaml(endpoint.getProperties().filter(property => endpointNodePropertyKeys.includes(property.getKey))),
            capabilities: {}
        };

        [...parseCapabilitiesProperties(ENDPOINT_TOSCA_EQUIVALENT.capabilities).entries()].forEach(([capabilityKey, capabilityProperties]) => {
            let propertyKeys = Object.keys(capabilityProperties);
            template.capabilities[capabilityKey] = {
                properties: this.#parsePropertiesForYaml(endpoint.getProperties().filter(property => propertyKeys.includes(property.getKey)))
            }
        })

        return template;
    }

    #createExternalEndpointTemplate(endpoint: Entities.ExternalEndpoint): TOSCA_Node_Template {
        let externalEndpointNodePropertyKeys = parseProperties(EXTERNAL_ENDPOINT_TOSCA_EQUIVALENT.properties).map(property => property.getKey);
        let template: TOSCA_Node_Template = {
            type: EXTERNAL_ENDPOINT_TOSCA_KEY,
            metadata: flatMetaData(endpoint.getMetaData),
            properties: this.#parsePropertiesForYaml(endpoint.getProperties().filter(property => externalEndpointNodePropertyKeys.includes(property.getKey))),
            capabilities: {}
        };

        [...parseCapabilitiesProperties(EXTERNAL_ENDPOINT_TOSCA_EQUIVALENT.capabilities).entries()].forEach(([capabilityKey, capabilityProperties]) => {
            let propertyKeys = Object.keys(capabilityProperties);
            template.capabilities[capabilityKey] = {
                properties: this.#parsePropertiesForYaml(endpoint.getProperties().filter(property => propertyKeys.includes(property.getKey)))
            }
        })

        return template;
    }

    #createRequestTraceTemplate(requestTrace: Entities.RequestTrace, systemEntity: Entities.System, keyIdMap: TwoWayKeyIdMap): TOSCA_Node_Template {

        let template: TOSCA_Node_Template = {
            type: REQUEST_TRACE_TOSCA_KEY,
            metadata: flatMetaData(requestTrace.getMetaData),
            properties: this.#parsePropertiesForYaml(requestTrace.getProperties())
        }

        // overwrite with keys
        if (requestTrace.getExternalEndpoint) {
            if (!template.requirements) {
                template.requirements = [];
                template.requirements.push({
                    "external_endpoint": {
                        node: this.#keyIdMap.getKey(requestTrace.getExternalEndpoint.getId),
                        relationship: "cna-modeling.relationships.PartOf"
                    }
                })
            }
        }

        let linkKeys: string[][] = [];
        let nodeKeys = new Set<string>();
        for (const linkIndex of requestTrace.getLinks) {
            //template.properties.links.push(keyIdMap.getKey(link.getId));
            linkKeys.push(linkIndex.map(link => keyIdMap.getKey(link.getId)));
            linkIndex.forEach(link => {
                nodeKeys.add(keyIdMap.getKey(link.getSourceEntity.getId));
                let targetComponent = systemEntity.searchComponentOfEndpoint(link.getTargetEndpoint.getId);
                if (targetComponent) {
                    nodeKeys.add(keyIdMap.getKey(targetComponent.getId));
                }
            })
        }
        template.properties.involved_links = linkKeys;
        template.properties.nodes = [...nodeKeys];

        return template;
    }

    #isNonEmpty(obj) {
        for (const prop in obj) {
            if (Object.hasOwn(obj, prop) && obj[prop]) {
                return true;
            }
        }
        return false;
    }
}

export { EntitiesToToscaConverter }